{"version":3,"sources":["components/InputComponent/InputComponent.js","constants.js","components/InputComponent/ConversationBox.js","components/InputComponent/MainScreen.js","App.js","serviceWorker.js","index.js"],"names":["InputComponent","state","value","listening","modalOpen","textInput","React","createRef","handleChange","e","setState","target","handleClick","type","props","setConversation","prev","author","time","Date","getTime","resetTranscript","current","focus","handleListen","stopListening","startListening","this","transcript","browserSupportsSpeechRecognition","TextField","variant","label","onChange","multiline","autoFocus","inputRef","style","theme","primary","className","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","color","Button","disabled","handleSave","reset","Component","SpeechRecognition","autoStart","ConversationBox","messagesEndRef","useRef","useEffect","scrollIntoView","behavior","conversations","toDateString","map","item","index","key","newConversation","splice","deleteDialogue","ref","MainScreen","useState","conversation","a","length","alert","Firebase","database","toUTCString","set","date","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.577bef60.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { TextField, Button, IconButton } from \"@material-ui/core\";\r\nimport { HUMAN, BOT } from \"../../constants\";\r\nimport \"../../App.css\";\r\nimport SpeechRecognition from \"react-speech-recognition\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport MicOffIcon from \"@material-ui/icons/MicOff\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nclass InputComponent extends Component {\r\n  state = {\r\n    value: \"\",\r\n    listening: false,\r\n    modalOpen: false,\r\n  };\r\n\r\n  textInput = React.createRef();\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      value: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleClick = (type) => {\r\n    this.props.setConversation((prev) => [\r\n      ...prev,\r\n      {\r\n        value: this.state.value,\r\n        author: type ? HUMAN : BOT,\r\n        time: new Date().getTime(),\r\n      },\r\n    ]);\r\n    this.props.resetTranscript(true);\r\n    this.setState({\r\n      value: \"\",\r\n    });\r\n    this.textInput.current.focus();\r\n  };\r\n\r\n  handleListen = () => {\r\n    this.setState({\r\n      listening: !this.state.listening,\r\n    });\r\n    if (!this.state.listening) {\r\n      this.props.startListening(true);\r\n    } else {\r\n      this.props.stopListening(false);\r\n    }\r\n  };\r\n\r\n  componentWillReceiveProps() {\r\n    this.setState({\r\n      value: this.props.transcript,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { browserSupportsSpeechRecognition } = this.props;\r\n\r\n    if (!browserSupportsSpeechRecognition) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          label=\"Enter Text Here\"\r\n          value={this.state.value}\r\n          onChange={this.handleChange}\r\n          multiline\r\n          autoFocus\r\n          inputRef={this.textInput}\r\n          style={{ theme: { primary: \"red\" } }}\r\n          className=\"input\"\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={this.handleListen}>\r\n                  {!this.state.listening ? (\r\n                    <MicIcon color=\"primary\" />\r\n                  ) : (\r\n                    <MicOffIcon color=\"primary\" />\r\n                  )}\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <br />\r\n        <br />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled={this.state.value === \"\"}\r\n          className=\"button\"\r\n          onClick={() => this.handleClick(1)}\r\n        >\r\n          Send Human\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          disabled={this.state.value === \"\"}\r\n          className=\"button\"\r\n          onClick={() => this.handleClick(0)}\r\n        >\r\n          Send BOT\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\"button\"\r\n          onClick={this.props.handleSave}\r\n        >\r\n          Save\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          className=\"button\"\r\n          onClick={this.props.reset}\r\n        >\r\n          Reset\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst options = {\r\n  autoStart: false,\r\n};\r\n\r\nexport default SpeechRecognition(options)(InputComponent);\r\n","export const BOT = \"BOT\";\r\nexport const HUMAN = \"HUMAN\";","import React, { useRef, useEffect } from \"react\";\r\nimport { HUMAN } from \"../../constants\";\r\nimport \"../../App.css\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\n\r\nfunction ConversationBox(props) {\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const deleteDialogue = (index) => {\r\n    const newConversation = [...props.conversations];\r\n    newConversation.splice(index, 1);\r\n    props.setConversation(newConversation);\r\n  };\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(scrollToBottom, [props.conversations]);\r\n\r\n  return (\r\n    <div className='main-container'>\r\n      <div className=\"header\">{new Date().toDateString()}</div>\r\n      <div className=\"dialogue-container\">\r\n        {props.conversations.map((item, index) => (\r\n          <div className=\"row\" key={index}>\r\n            <div\r\n              className={\r\n                item.author === HUMAN ? \"dialogue d-human\" : \"dialogue d-bot\"\r\n              }\r\n            >\r\n              {item.author === HUMAN ? \"Human :\" : \"Bot :\"}\r\n              &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{item.value}\r\n            </div>\r\n            <IconButton onClick={() => deleteDialogue(index)}>\r\n              <CancelIcon />\r\n            </IconButton>\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConversationBox;\r\n","import React, { useState } from \"react\";\r\nimport InputComponent from \"./InputComponent\";\r\nimport ConversationBox from \"./ConversationBox\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { HUMAN, BOT } from \"../../constants\";\r\nimport Firebase from \"firebase\";\r\n\r\nfunction MainScreen() {\r\n  const [conversation, setConversation] = useState([]);\r\n\r\n  const handleSave = async () => {\r\n    if (conversation.length === 0) {\r\n      alert(\"Please Add at least one dialogue.\");\r\n      return;\r\n    }\r\n    await Firebase.database()\r\n      .ref(\"/\" + new Date().toUTCString())\r\n      .set({ conversation: conversation, date: new Date().toDateString() });\r\n\r\n    setConversation([]);\r\n  };\r\n\r\n  const reset = () => {\r\n    setConversation([]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ConversationBox\r\n        conversations={conversation}\r\n        setConversation={setConversation}\r\n      />\r\n      <InputComponent\r\n        conversations={conversation}\r\n        setConversation={setConversation}\r\n        handleSave={handleSave}\r\n        reset={reset}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainScreen;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport MainScreen from \"./components/InputComponent/MainScreen\";\nimport { Container } from \"@material-ui/core\";\nimport * as firebase from \"firebase\";\n\nvar firebaseConfig = {\n  //your api key\n  apiKey: \"AIzaSyDDpc2caXDRW_Lwpm8Qj-qfZONGvwwSgPE\",\n  authDomain: \"coronacountindia.firebaseapp.com\",\n  databaseURL: \"https://coronacountindia.firebaseio.com\",\n  projectId: \"coronacountindia\",\n  storageBucket: \"coronacountindia.appspot.com\",\n  messagingSenderId: \"444376998366\",\n  appId: \"1:444376998366:web:5caa794e24b40d4274fd4f\",\n};\nfirebase.initializeApp(firebaseConfig);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"lg\">\n        <MainScreen />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}